import logging

from api.authentication.models import User
from api.authentication.serializers import (ForgetPasswordSerializer,
                                            MyTokenObtainPairSerializer,
                                            UpdatePasswordSerializer)
from api.utils.views import (CustomEMailer, generate_tokens_for_user,
                             get_user_id_from_token, response)
from django.contrib.auth.hashers import make_password
from django.shortcuts import get_object_or_404
from drf_yasg.utils import swagger_auto_schema
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.views import TokenObtainPairView

logger = logging.getLogger(__name__)


# Create your views here.
class LogoutAPIView(APIView):
    def post(self, request):
        print(request.META.get("HTTP_AUTHORIZATION"))
        response = Response()
        if request.COOKIES.get('jwt'):
            response.delete_cookie('jwt')
        response.data = {
            'message': 'Logout success'
        }
        return response


class ForgetPasswordAPIView(APIView):
    serializer_class = ForgetPasswordSerializer

    @swagger_auto_schema(request_body=ForgetPasswordSerializer)
    def post(self, request):
        """
        1st step of password change procedure
        accept valid email id to send mail about next step of the procedure

        :param request:
        :return:
        """
        serializer = ForgetPasswordSerializer(request.data)
        # data = serializer.data

        user = User.objects.get(email=serializer.data.get('email'))

        if not user:
            logger.warning(f"{serializer.data.get('email')} not found")
            return response(status=status.HTTP_404_NOT_FOUND)

        try:
            token = generate_tokens_for_user(user)
            CustomEMailer.forget_password_mail(token, user.email, request)
            return response(message=f'Password change link sent to {user.email}', status=status.HTTP_200_OK)
        except Exception as e:
            logger.exception(e)
            return response(message=e.__str__(), status=status.HTTP_400_BAD_REQUEST)


class UpdatePasswordAPIView(APIView):
    @swagger_auto_schema(request_body=UpdatePasswordSerializer)
    def post(self, request, **kwargs):
        """
        2nd step of password change procedure
        accept password1, password2 in request.data()

        :param request: autogenerated value i.e. collected form email
        :return:
        """
        serializer = UpdatePasswordSerializer(request.data)
        if serializer.data.get('password1') != serializer.data.get('password2'):
            return response(status=status.HTTP_400_BAD_REQUEST, message="password1 and password2 must me equal")

        user_id = get_user_id_from_token(kwargs.get("token"))

        try:
            user = get_object_or_404(User, pk=user_id)
            user.password = make_password(serializer.data.get('password1'))
            user.save()
            return response(message="password changed", status=status.HTTP_202_ACCEPTED)
        except Exception as e:
            logger.exception(e)
            return response(message=e.__str__(), status=status.HTTP_400_BAD_REQUEST)


class MyTokenObtainPairView(TokenObtainPairView):
    """
    Login APIView
    User authentication view accept email id and password
    """
    serializer_class = MyTokenObtainPairSerializer
